name: Testbuild for Linux
run-name: testbuild_linux
on:
  push:
    branches:
      - 'main'
      - 'dev'
  pull_request:
    types:
      - edited
      - opened
      - synchronize
concurrency:
  # Cancel concurrent workflows for the same PR or commit hash.
  group: ${{github.workflow}}-${{github.event_name == 'pull_request' && github.head_ref || github.sha}}
  cancel-in-progress: true
jobs:
  build_ubuntu_x86_64:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - env: ubuntu
    steps:
    - name: Install build dependencies
      run: |
        # this PPA should provide GCC 13, which is needed for std::format support
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt update
        sudo apt install libgl1-mesa-dev libsdl2-dev libopenal-dev libvorbis-dev zlib1g-dev cmake ninja-build g++-13 gcc-13
    - name: Check out repository code
      uses: actions/checkout@v4
    - name: Build
      run: |
        mkdir build
        cd build
        # -DFORCE_COLORED_OUTPUT=ON ? didn't seem to work, or at least not visible on website
        cmake -G Ninja -DCMAKE_C_COMPILER=gcc-13 -DCMAKE_CXX_COMPILER=g++-13 ../neo/
        ninja
    - name: Create testbuild package
      run: |
        # Create release directory tree
        export PKGDIR="skindeep-linux-$(git rev-parse --short HEAD)"
        echo "pkgname=$PKGDIR" >> $GITHUB_ENV
        mkdir -p publish/$PKGDIR/
        # Copy release assets
        cp build/skindeep publish/$PKGDIR/
        cp neo/COPYING.txt publish/$PKGDIR/
        cp neo/LibLicenses.txt publish/$PKGDIR/
        echo "SkinDeep for 64bit (amd64 aka x86_64 aka x64) Linux, built $(date)" > publish/$PKGDIR/README.txt
        echo -e "from ${{ github.ref_name }} commit ${{ github.sha }}\n" >> publish/$PKGDIR/README.txt
        echo "!!! Note that you must set SkinDeep executable !!!" >> publish/$PKGDIR/README.txt
        echo "! In a Terminal, in this directory, run:" >> publish/$PKGDIR/README.txt
        echo "  chmod 755 skindeep" >> publish/$PKGDIR/README.txt
        echo -e "(this is because of limitations in Githubs Workflow Actions)\n" >> publish/$PKGDIR/README.txt
        cat README.txt >> publish/$PKGDIR/README.txt
        #cp Changelog.md publish/$PKGDIR/Changelog.txt
        #cp Configuration.md publish/$PKGDIR/Configuration.txt
    - name: Upload testbuild package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.pkgname }}
        path: publish/
        if-no-files-found: error
